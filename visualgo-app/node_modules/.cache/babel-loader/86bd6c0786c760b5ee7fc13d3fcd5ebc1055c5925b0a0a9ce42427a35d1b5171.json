{"ast":null,"code":"var _jsxFileName = \"/home/vedant/visualgo/visualgo-app/src/index.js\",\n  _s = $RefreshSig$();\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport './App.css';\nimport React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport AlgorithmSelector from './components/AlgorithmSelector';\nimport GraphGenDialog from './components/GraphGenDialog';\nimport generateGraph from './algorithms/graph_gen/factory';\nimport Header from './components/Header';\nimport GraphBox from './components/GraphBox';\nimport { Typography } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [deleteButton, setDeleteButton] = useState(false);\n  const [status, setStatus] = useState('GEN');\n  const [state, setState] = useState({\n    counter: 0,\n    graph: {\n      nodes: [\n        // { id: 1, label: \"Node 1\", title: \"node 1 tootip text\" },\n        // { id: 2, label: \"Node 2\", title: \"node 2 tootip text\" },\n        // { id: 3, label: \"Node 3\", title: \"node 3 tootip text\" },\n        // { id: 4, label: \"Node 4\", title: \"node 4 tootip text\" },\n        // { id: 5, label: \"Node 5\", title: \"node 5 tootip text\" }\n      ],\n      edges: [\n        // { from: 1, to: 2 },\n        // { from: 1, to: 3 },\n        // { from: 2, to: 4 },\n        // { from: 2, to: 5 }\n      ]\n    },\n    events: {}\n  });\n  const {\n    graph,\n    events\n  } = state;\n  const [goalNodes, setGoalNodes] = useState([]);\n  const [startNode, setStartNode] = useState([]);\n  const [network, setNetwork] = useState(null);\n  useEffect(() => {\n    graph.nodes.forEach(element => {\n      if (element.id == startNode) {\n        element.group = '_start';\n      } else if (element.id in goalNodes) {\n        element.group = '_goal';\n      } else {\n        element.group = '_default';\n      }\n    });\n    console.log(graph.nodes);\n    var options = {\n      groups: {\n        useDefaultGroups: false,\n        _start: {\n          color: {\n            background: 'red'\n          },\n          borderWidth: 3,\n          shape: \"square\"\n        },\n        _goal: {\n          color: {\n            background: 'green'\n          },\n          borderWidth: 3,\n          shape: \"dot\"\n        },\n        _default: {\n          color: {\n            background: 'blue'\n          },\n          borderWidth: 3,\n          shape: \"triangle\"\n        }\n      }\n    };\n    setGraph(graph);\n  }, [network, startNode, goalNodes]);\n  const handleNodeDelete = () => {\n    network.deleteSelected();\n\n    // alert('Nodes: ' + graph.nodes.remove)\n    setDeleteButton(false);\n  };\n  const handleGenerateGraph = (nodes, grid, scheme) => {\n    let graph_ = generateGraph(nodes, grid, scheme);\n    // alert(graph_.nodes.length)\n    setState(_ref => {\n      let {\n        graph,\n        counter,\n        ...rest\n      } = _ref;\n      return {\n        graph: graph_,\n        counter: graph_.nodes.length,\n        ...rest\n      };\n    });\n    setStatus('GEN');\n  };\n  const handleGoalSet = event => {\n    setGoalNodes(network.getSelectedNodes());\n    alert(goalNodes);\n    network.getSelectedNodes().forEach(element => {\n      // alert(element)\n      network.findNode(element).options.shape = 'square';\n    });\n    console.log(goalNodes);\n  };\n  const handleStartSet = event => {\n    if (network.getSelectedNodes().length == 1) {\n      setStartNode(network.getSelectedNodes()[0]);\n    } else {\n      alert('Inappropriate selection: please select exactly one node');\n    }\n  };\n  const [algo, setAlgo] = useState('DFS');\n  const handleAlgoChange = event => {\n    setAlgo(event.target.value);\n    // setStatus('RUN')\n  };\n\n  const handleStatusChange = (event, value) => {\n    setStatus(value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      value: status,\n      onChange: handleStatusChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), status == 'GEN' && /*#__PURE__*/_jsxDEV(GraphGenDialog, {\n      nodes: 200,\n      onGenerate: handleGenerateGraph\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 27\n    }, this), status == 'SEL' && /*#__PURE__*/_jsxDEV(AlgorithmSelector, {\n      algo: algo,\n      handleAlgoChange: handleAlgoChange,\n      setStartNode: handleStartSet,\n      setGoalNodes: handleGoalSet\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 27\n    }, this), state.graph.nodes.length > 0 && /*#__PURE__*/_jsxDEV(GraphBox, {\n      startNode: startNode,\n      goalNodes: goalNodes,\n      graph: graph,\n      style: {\n        height: '800px'\n      },\n      getNetwork: network => {\n        setNetwork(network);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 40\n    }, this), state.graph.nodes.length == 0 && /*#__PURE__*/_jsxDEV(Typography, {\n      style: {\n        flex: 1,\n        height: '500px',\n        width: '100%',\n        textAlign: 'center',\n        textAlignVertical: 'middle',\n        paddingTop: '200px'\n      },\n      children: \"No graph generated yet!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 41\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Xbp0cWfb3VEDtDaPVOrTWR9zvDs=\");\n_c = App;\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 145,\n  columnNumber: 3\n}, this), document.getElementById(\"root\"));\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["reportWebVitals","React","useEffect","useState","ReactDOM","AlgorithmSelector","GraphGenDialog","generateGraph","Header","GraphBox","Typography","App","deleteButton","setDeleteButton","status","setStatus","state","setState","counter","graph","nodes","edges","events","goalNodes","setGoalNodes","startNode","setStartNode","network","setNetwork","forEach","element","id","group","console","log","options","groups","useDefaultGroups","_start","color","background","borderWidth","shape","_goal","_default","setGraph","handleNodeDelete","deleteSelected","handleGenerateGraph","grid","scheme","graph_","rest","length","handleGoalSet","event","getSelectedNodes","alert","findNode","handleStartSet","algo","setAlgo","handleAlgoChange","target","value","handleStatusChange","height","flex","width","textAlign","textAlignVertical","paddingTop","render","document","getElementById"],"sources":["/home/vedant/visualgo/visualgo-app/src/index.js"],"sourcesContent":["import './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nimport './App.css';\n\n\nimport React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport AlgorithmSelector from './components/AlgorithmSelector';\nimport GraphGenDialog from './components/GraphGenDialog';\nimport generateGraph from './algorithms/graph_gen/factory';\nimport Header from './components/Header';\nimport GraphBox from './components/GraphBox';\nimport { Typography } from '@mui/material';\n\n\nconst App = () => {\n\n  const [deleteButton, setDeleteButton] = useState(false)\n  const [status, setStatus] = useState('GEN')\n  const [state, setState] = useState({\n    counter: 0,\n    graph: {\n      nodes: [\n        // { id: 1, label: \"Node 1\", title: \"node 1 tootip text\" },\n        // { id: 2, label: \"Node 2\", title: \"node 2 tootip text\" },\n        // { id: 3, label: \"Node 3\", title: \"node 3 tootip text\" },\n        // { id: 4, label: \"Node 4\", title: \"node 4 tootip text\" },\n        // { id: 5, label: \"Node 5\", title: \"node 5 tootip text\" }\n      ],\n      edges: [\n        // { from: 1, to: 2 },\n        // { from: 1, to: 3 },\n        // { from: 2, to: 4 },\n        // { from: 2, to: 5 }\n      ]\n    },\n    events: {}\n  })\n  const { graph, events } = state;\n  const [goalNodes, setGoalNodes] = useState([])\n  const [startNode, setStartNode] = useState([])\n  const [network, setNetwork] = useState(null);\n\n  useEffect(()=>{\n    graph.nodes.forEach(element => {\n      if(element.id == startNode) {\n        element.group = '_start'\n      }\n      else if(element.id in goalNodes) {\n        element.group = '_goal'\n      }\n      else {\n        element.group = '_default'\n      }\n    });\n    console.log(graph.nodes);\n    var options = {\n      groups: {\n        useDefaultGroups: false,\n        _start: {color: {background: 'red'}, borderWidth: 3, shape: \"square\"} ,\n        _goal: {color: {background: 'green'}, borderWidth: 3, shape: \"dot\"} ,\n        _default: {color: {background: 'blue'}, borderWidth: 3, shape: \"triangle\"}\n      }\n    }\n    setGraph(graph)\n  }, [network, startNode, goalNodes])\n\n  const handleNodeDelete = () => {\n    network.deleteSelected();\n    \n    // alert('Nodes: ' + graph.nodes.remove)\n    setDeleteButton(false);\n    \n  };\n  const handleGenerateGraph = (nodes, grid, scheme) => {\n    let graph_ = generateGraph(nodes, grid, scheme);\n    // alert(graph_.nodes.length)\n    setState(({graph, counter, ...rest})=>{return {graph: graph_, counter: graph_.nodes.length, ...rest}})\n  \n    setStatus('GEN')\n  }\n  const handleGoalSet = (event) => {\n    setGoalNodes(network.getSelectedNodes())\n    alert(goalNodes)\n    network.getSelectedNodes().forEach(element => {\n      // alert(element)\n      network.findNode(element).options.shape='square'\n    });\n    console.log(goalNodes)\n  }\n\n  const handleStartSet = (event)=> {\n    if(network.getSelectedNodes().length == 1) {\n      setStartNode(network.getSelectedNodes()[0])\n    }\n    else {\n      alert('Inappropriate selection: please select exactly one node')\n    }\n  }\n\n\n  const [algo, setAlgo] = useState('DFS')\n  const handleAlgoChange = (event) => {\n    setAlgo(event.target.value);\n    // setStatus('RUN')\n  };\n\n  const handleStatusChange = (event, value) => {\n    setStatus(value)\n  }\n  return (\n    <div  //style={{display:\"flex\"}}>\n    >\n      <Header value={status} onChange={handleStatusChange}/>\n      {/* <SubHeader value={status} onChange={handleStatusChange}/> */}\n      {status == 'GEN' && <GraphGenDialog nodes={200} onGenerate={handleGenerateGraph}/>}\n      {status == 'SEL' && <AlgorithmSelector algo={algo} handleAlgoChange={handleAlgoChange} setStartNode={handleStartSet} setGoalNodes={handleGoalSet}/>}\n      {/* {<menubar name='header' >\n        <button onClick={()=>{alert('clicked!');}}>\n          Click to add random nodes\n        </button>\n        <button onClick={()=>{}}>\n          Save Graph\n        </button>\n        {deleteButton && <button onClick={handleNodeDelete}>\n          Delete\n        </button>}\n      </menubar>} */}\n      {state.graph.nodes.length > 0 && <GraphBox startNode={startNode} goalNodes={goalNodes} graph={graph} style={{ height: '800px' }} getNetwork={network => {\n        setNetwork(network);\n      }}/>}\n      {state.graph.nodes.length == 0 && <Typography style={{flex: 1, height: '500px', width: '100%', textAlign:'center', textAlignVertical:'middle', paddingTop:'200px'}}>No graph generated yet!</Typography>}\n      {/* <Graph graph={graph} options={options} events={events} style={{ height: '800px' }} getNetwork={network => {\n        setNetwork(network);\n      }}/> */}\n      \n    </div>\n  );\n\n}\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById(\"root\")\n);\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}