{"ast":null,"code":"var _jsxFileName = \"/home/vedant/visualgo/visualgo-app/src/index.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import ReactDOM from 'react-dom/client';\nimport './index.css';\n// import App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport logo from './logo.svg';\nimport './App.css';\nimport Graph from \"react-graph-vis\";\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = {\n  layout: {\n    hierarchical: false\n  },\n  edges: {\n    color: \"#000000\"\n  }\n};\nfunction randomColor() {\n  const red = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const green = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const blue = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  return `#${red}${green}${blue}`;\n}\nconst App = () => {\n  _s();\n  const createNode = () => {\n    const color = randomColor();\n    setState(_ref => {\n      let {\n        graph: {\n          nodes,\n          edges\n        },\n        counter,\n        ...rest\n      } = _ref;\n      const id = counter + 1;\n      const from = Math.floor(Math.random() * (counter - 1)) + 1;\n      return {\n        graph: {\n          nodes: [...nodes, {\n            id,\n            label: `Node ${id}`,\n            color\n          }],\n          edges: [...edges, {\n            from,\n            to: id\n          }]\n        },\n        counter: id,\n        ...rest\n      };\n    });\n  };\n  const [state, setState] = useState({\n    counter: 5,\n    graph: {\n      nodes: [{\n        id: 1,\n        label: \"Node 1\",\n        color: \"#e04141\"\n      }, {\n        id: 2,\n        label: \"Node 2\",\n        color: \"#e09c41\"\n      }, {\n        id: 3,\n        label: \"Node 3\",\n        color: \"#e0df41\"\n      }, {\n        id: 4,\n        label: \"Node 4\",\n        color: \"#7be041\"\n      }, {\n        id: 5,\n        label: \"Node 5\",\n        color: \"#41e0c9\"\n      }],\n      edges: [{\n        from: 1,\n        to: 2\n      }, {\n        from: 1,\n        to: 3\n      }, {\n        from: 2,\n        to: 4\n      }, {\n        from: 2,\n        to: 5\n      }]\n    },\n    events: {\n      select: _ref2 => {\n        let {\n          nodes,\n          edges\n        } = _ref2;\n        console.log(\"Selected nodes:\");\n        console.log(nodes);\n        console.log(\"Selected edges:\");\n        console.log(edges);\n        // alert(\"Selected node: \" + nodes);\n      },\n      stabilized: () => {\n        if (network) {\n          // Network will be set using getNetwork event from the Graph component\n          network.setOptions({\n            physics: false\n          }); // Disable physics after stabilization\n          network.fit();\n        }\n      }\n\n      // doubleClick: ({ nodes, edges }) => {\n      //   console.log(\"Deleted nodes:\");\n      //   console.log(nodes);\n      //   console.log(\"Deleted edges:\");\n      //   console.log(edges);\n\n      //   // alert(\"Selected node: \" + nodes);\n      // },\n      // doubleClick: ({ pointer: { canvas } }) => {\n      //   createNode(canvas.x, canvas.y);\n      // }\n    }\n  });\n\n  const {\n    graph,\n    events\n  } = state;\n  // const {network, setNetwork} = useState(null);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"menubar\", {\n      name: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          createNode();\n        },\n        children: \"Click to add random nodes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Work area:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Graph, {\n      graph: graph,\n      options: options,\n      events: events,\n      style: {\n        height: \"640px\"\n      },\n      getNetwork: network => {\n        setNetwork(network);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"rFIyLh2EONW+yj3QTg8iqLlGwE8=\");\n_c = App;\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 120,\n  columnNumber: 3\n}, this), document.getElementById(\"root\"));\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["reportWebVitals","logo","Graph","React","useState","ReactDOM","options","layout","hierarchical","edges","color","randomColor","red","Math","floor","random","toString","padStart","green","blue","App","createNode","setState","graph","nodes","counter","rest","id","from","label","to","state","events","select","console","log","stabilized","network","setOptions","physics","fit","height","setNetwork","render","document","getElementById"],"sources":["/home/vedant/visualgo/visualgo-app/src/index.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import ReactDOM from 'react-dom/client';\nimport './index.css';\n// import App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Graph from \"react-graph-vis\";\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nconst options = {\n  layout: {\n    hierarchical: false\n  },\n  edges: {\n    color: \"#000000\"\n  }\n};\n\nfunction randomColor() {\n  const red = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const green = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const blue = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  return `#${red}${green}${blue}`;\n}\n\n\nconst App = () => {\n\n  const createNode = () => {\n    const color = randomColor();\n    setState(({ graph: { nodes, edges }, counter, ...rest }) => {\n      const id = counter + 1;\n      const from = Math.floor(Math.random() * (counter - 1)) + 1;\n      return {\n        graph: {\n          nodes: [\n            ...nodes,\n            { id, label: `Node ${id}`, color}\n          ],\n          edges: [\n            ...edges,\n            { from, to: id }\n          ]\n        },\n        counter: id,\n        ...rest\n      }\n    });\n  }\n  const [state, setState] = useState({\n    counter: 5,\n    graph: {\n      nodes: [\n        { id: 1, label: \"Node 1\", color: \"#e04141\" },\n        { id: 2, label: \"Node 2\", color: \"#e09c41\" },\n        { id: 3, label: \"Node 3\", color: \"#e0df41\" },\n        { id: 4, label: \"Node 4\", color: \"#7be041\" },\n        { id: 5, label: \"Node 5\", color: \"#41e0c9\" }\n      ],\n      edges: [\n        { from: 1, to: 2 },\n        { from: 1, to: 3 },\n        { from: 2, to: 4 },\n        { from: 2, to: 5 }\n      ]\n    },\n    events: {\n      select: ({ nodes, edges }) => {\n        console.log(\"Selected nodes:\");\n        console.log(nodes);\n        console.log(\"Selected edges:\");\n        console.log(edges);\n        // alert(\"Selected node: \" + nodes);\n      },stabilized: () => {\n        if (network) { // Network will be set using getNetwork event from the Graph component\n            network.setOptions({ physics: false }); // Disable physics after stabilization\n            network.fit();\n        }\n      }\n\n      \n      \n      // doubleClick: ({ nodes, edges }) => {\n      //   console.log(\"Deleted nodes:\");\n      //   console.log(nodes);\n      //   console.log(\"Deleted edges:\");\n      //   console.log(edges);\n        \n      //   // alert(\"Selected node: \" + nodes);\n      // },\n      // doubleClick: ({ pointer: { canvas } }) => {\n      //   createNode(canvas.x, canvas.y);\n      // }\n    }\n  })\n  const { graph, events } = state;\n  // const {network, setNetwork} = useState(null);\n  return (\n    <div>\n      <menubar name='header' >\n        <button onClick={()=>{createNode();}}>\n          Click to add random nodes\n        </button>\n        <p>Work area:</p>\n      </menubar>\n      <Graph graph={graph} options={options} events={events} style={{ height: \"640px\" }} getNetwork={network => {\n         setNetwork(network);\n        }\n    } />\n    </div>\n  );\n\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById(\"root\")\n);\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}