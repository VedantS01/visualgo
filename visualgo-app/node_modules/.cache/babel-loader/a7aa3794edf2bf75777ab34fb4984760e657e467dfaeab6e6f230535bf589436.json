{"ast":null,"code":"var _jsxFileName = \"/home/vedant/visualgo/visualgo-app/src/index.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import ReactDOM from 'react-dom/client';\nimport './index.css';\n// import App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport logo from './logo.svg';\nimport './App.css';\nimport Graph from \"react-graph-vis\";\n// import {loadJSON} from \"vis-network\"\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport vis from \"vis-network\";\nimport AlgorithmSelector from './components/AlgorithmSelector';\nimport Header from './components/Header';\nimport SubHeader from './components/SubHeader';\nimport GraphBox from './components/GraphBox';\n\n// function loadJSON(path, success, error) {\n//   var xhr = new XMLHttpRequest();\n//   xhr.onreadystatechange = function () {\n//     if (xhr.readyState === 4) {\n//       if (xhr.status === 200) {\n//         success(JSON.parse(xhr.responseText));\n//       }\n//       else {\n//         error(xhr);\n//       }\n//     }\n//   };\n//   xhr.open('GET', path, true);\n//   xhr.send();\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = {\n  height: \"100%\",\n  width: \"100%\",\n  nodes: {\n    shape: \"dot\",\n    size: 16\n  },\n  layout: {\n    hierarchical: false\n  },\n  physics: {\n    // forceAtlas2Based: {\n    //     gravitationalConstant: -26,\n    //     centralGravity: 0.005,\n    //     springLength: 230,\n    //     springConstant: 0.18,\n    // },\n    maxVelocity: 146,\n    // solver: \"forceAtlas2Based\",\n    // solver: \"repulsion\",\n    timestep: 0.35,\n    stabilization: {\n      enabled: true,\n      iterations: 2000,\n      updateInterval: 25\n    }\n  },\n  edges: {\n    color: \"#abb4be\",\n    size: 12\n  },\n  interaction: {\n    multiselect: true\n  }\n};\nfunction randomColor() {\n  const red = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const green = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const blue = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  return `#${red}${green}${blue}`;\n}\nfunction generateGraph() {\n  let data = {\n    nodes: [{\n      id: 1,\n      label: \"Node 1\",\n      title: \"node 1 tootip text\"\n    }, {\n      id: 2,\n      label: \"Node 2\",\n      title: \"node 2 tootip text\"\n    }, {\n      id: 3,\n      label: \"Node 3\",\n      title: \"node 3 tootip text\"\n    }, {\n      id: 4,\n      label: \"Node 4\",\n      title: \"node 4 tootip text\"\n    }, {\n      id: 5,\n      label: \"Node 5\",\n      title: \"node 5 tootip text\"\n    }],\n    edges: [{\n      from: 1,\n      to: 2\n    }, {\n      from: 1,\n      to: 3\n    }, {\n      from: 2,\n      to: 4\n    }, {\n      from: 2,\n      to: 5\n    }]\n  };\n  return data;\n}\nconst App = () => {\n  _s();\n  // load the JSON file containing the Gephi network.\n  // try {\n  //   var gephiJSON = loadJSON(\"./datasources/graph_data.json\"); // code in importing_from_gephi.\n\n  // // you can customize the result like with these options. These are explained below.\n  // // These are the default options.\n  // var parserOptions = {\n  //   edges: {\n  //     inheritColor: false\n  //   },\n  //   nodes: {\n  //     fixed: true,\n  //     parseColor: false\n  //   }\n  // }\n\n  // // parse the gephi file to receive an object\n  // // containing nodes and edges in vis format.\n  // var parsed = vis.parseGephiNetwork(gephiJSON, parserOptions);\n\n  // // provide data in the normal fashion\n  // var data = {\n  //   nodes: parsed.nodes,\n  //   edges: parsed.edges\n  // };\n\n  // } catch {\n  let data = {\n    nodes: [{\n      id: 1,\n      label: \"Node 1\",\n      title: \"node 1 tootip text\"\n    }, {\n      id: 2,\n      label: \"Node 2\",\n      title: \"node 2 tootip text\"\n    }, {\n      id: 3,\n      label: \"Node 3\",\n      title: \"node 3 tootip text\"\n    }, {\n      id: 4,\n      label: \"Node 4\",\n      title: \"node 4 tootip text\"\n    }, {\n      id: 5,\n      label: \"Node 5\",\n      title: \"node 5 tootip text\"\n    }],\n    edges: [{\n      from: 1,\n      to: 2\n    }, {\n      from: 1,\n      to: 3\n    }, {\n      from: 2,\n      to: 3\n    }, {\n      from: 2,\n      to: 5\n    }]\n  };\n  // }\n\n  const createNode = () => {\n    // const color = randomColor();\n    setState(_ref => {\n      let {\n        graph: {\n          nodes,\n          edges\n        },\n        counter,\n        ...rest\n      } = _ref;\n      const id = counter + 1;\n      // alert('Nodes: ' + nodes.length)\n      const from_pos = Math.floor(Math.random() * (nodes.length - 1));\n      const from = nodes[from_pos].id;\n      // graph.fit();\n      return {\n        graph: {\n          nodes: [...nodes, {\n            id,\n            label: `Node ${id}`\n          }],\n          edges: [...edges, {\n            from,\n            to: id\n          }]\n        },\n        counter: id,\n        ...rest\n      };\n    });\n  };\n  const [deleteButton, setDeleteButton] = useState(false);\n  const [status, setStatus] = useState('INIT');\n  const [state, setState] = useState({\n    counter: 5,\n    graph: {\n      nodes: [{\n        id: 1,\n        label: \"Node 1\",\n        title: \"node 1 tootip text\"\n      }, {\n        id: 2,\n        label: \"Node 2\",\n        title: \"node 2 tootip text\"\n      }, {\n        id: 3,\n        label: \"Node 3\",\n        title: \"node 3 tootip text\"\n      }, {\n        id: 4,\n        label: \"Node 4\",\n        title: \"node 4 tootip text\"\n      }, {\n        id: 5,\n        label: \"Node 5\",\n        title: \"node 5 tootip text\"\n      }],\n      edges: [{\n        from: 1,\n        to: 2\n      }, {\n        from: 1,\n        to: 3\n      }, {\n        from: 2,\n        to: 4\n      }, {\n        from: 2,\n        to: 5\n      }]\n    },\n    events: {\n      select: _ref2 => {\n        let {\n          nodes,\n          edges\n        } = _ref2;\n        console.log(\"Selected nodes:\");\n        console.log(nodes);\n        console.log(\"Selected edges:\");\n        console.log(edges);\n        // alert(\"Selected node: \" + nodes);\n        if (nodes.size === 0 && edges.size === 0) setDeleteButton(false);else setDeleteButton(true);\n      }\n      // deselectNode: ({nodes, edges, ...rest}) => {\n      //   if(nodes.size === 0 && edges.size === 0)\n      //   setDeleteButton(false);\n      // },\n      // deselectEdge: ({nodes, edges, ...rest}) => {\n      //   if(nodes.size === 0 && edges.size === 0)\n      //   setDeleteButton(false);\n      // },\n      // click: ({nodes, edges, ...rest}) => {\n      //   if(nodes.size === 0 && edges.size === 0)\n      //   setDeleteButton(false);\n      // },\n      // stabilized: () => {\n      //   if (graph) { // Network will be set using getNetwork event from the Graph component\n      //       graph.setOptions({ physics: false }); // Disable physics after stabilization\n      //       graph.fit();\n      //   }\n      // }\n\n      // doubleClick: ({ nodes, edges }) => {\n      //   console.log(\"Deleted nodes:\");\n      //   console.log(nodes);\n      //   console.log(\"Deleted edges:\");\n      //   console.log(edges);\n\n      //   // alert(\"Selected node: \" + nodes);\n      // },\n      // doubleClick: ({ pointer: { canvas } }) => {\n      //   createNode(canvas.x, canvas.y);\n      // }\n    }\n  });\n\n  const {\n    graph,\n    events\n  } = state;\n  const [network, setNetwork] = useState(null);\n  const handleNodeDelete = () => {\n    network.deleteSelected();\n\n    // alert('Nodes: ' + graph.nodes.remove)\n    setDeleteButton(false);\n  };\n  const handleGenerateGraph = () => {\n    let graph_ = generateGraph();\n    setState(_ref3 => {\n      let {\n        graph,\n        counter,\n        ...rest\n      } = _ref3;\n      return {\n        graph: graph_,\n        counter: graph_.nodes.length,\n        ...rest\n      };\n    });\n    // createNode()\n    setStatus('GEN');\n  };\n  const [algo, setAlgo] = useState(null);\n  const handleAlgoChange = event => {\n    setAlgo(event.target.value);\n    setStatus('RUN');\n  };\n  const algos = [{\n    label: \"Depth First Search\",\n    value: \"DFS\"\n  }, {\n    label: \"Breadth First Search\",\n    value: \"BFS\"\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    height: \"100%\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SubHeader, {\n      status: status,\n      onGenerate: handleGenerateGraph\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"menubar\", {\n      name: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          createNode();\n        },\n        children: \"Click to add random nodes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {},\n        children: \"Save Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this), deleteButton && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNodeDelete,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 26\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Work area:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GraphBox, {\n      graph: graph,\n      options: options,\n      events: events,\n      style: {\n        height: '800px'\n      },\n      getNetwork: network => {\n        setNetwork(network);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AlgorithmSelector, {\n      value: algo,\n      onChange: handleAlgoChange,\n      algos: algos\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 266,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"HlYnDPF099+THsOhcLOK9z0lksM=\");\n_c = App;\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 294,\n  columnNumber: 3\n}, this), document.getElementById(\"root\"));\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["reportWebVitals","logo","Graph","React","useState","ReactDOM","vis","AlgorithmSelector","Header","SubHeader","GraphBox","options","height","width","nodes","shape","size","layout","hierarchical","physics","maxVelocity","timestep","stabilization","enabled","iterations","updateInterval","edges","color","interaction","multiselect","randomColor","red","Math","floor","random","toString","padStart","green","blue","generateGraph","data","id","label","title","from","to","App","createNode","setState","graph","counter","rest","from_pos","length","deleteButton","setDeleteButton","status","setStatus","state","events","select","console","log","network","setNetwork","handleNodeDelete","deleteSelected","handleGenerateGraph","graph_","algo","setAlgo","handleAlgoChange","event","target","value","algos","render","document","getElementById"],"sources":["/home/vedant/visualgo/visualgo-app/src/index.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import ReactDOM from 'react-dom/client';\nimport './index.css';\n// import App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport logo from './logo.svg';\nimport './App.css';\n\n\n\nimport Graph from \"react-graph-vis\";\n// import {loadJSON} from \"vis-network\"\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport vis from \"vis-network\"\nimport AlgorithmSelector from './components/AlgorithmSelector';\nimport Header from './components/Header';\nimport SubHeader from './components/SubHeader';\nimport GraphBox from './components/GraphBox';\n\n// function loadJSON(path, success, error) {\n//   var xhr = new XMLHttpRequest();\n//   xhr.onreadystatechange = function () {\n//     if (xhr.readyState === 4) {\n//       if (xhr.status === 200) {\n//         success(JSON.parse(xhr.responseText));\n//       }\n//       else {\n//         error(xhr);\n//       }\n//     }\n//   };\n//   xhr.open('GET', path, true);\n//   xhr.send();\n// }\n\nconst options = {\n  height: \"100%\",\n    width: \"100%\",\n    nodes: {\n        shape: \"dot\",\n        size: 16\n    },\n    layout: {\n        hierarchical: false\n    },\n    physics: {\n        // forceAtlas2Based: {\n        //     gravitationalConstant: -26,\n        //     centralGravity: 0.005,\n        //     springLength: 230,\n        //     springConstant: 0.18,\n        // },\n        maxVelocity: 146,\n        // solver: \"forceAtlas2Based\",\n        // solver: \"repulsion\",\n        timestep: 0.35,\n        stabilization: {\n            enabled: true,\n            iterations: 2000,\n            updateInterval: 25,\n        },\n    },\n    edges: {\n        color: \"#abb4be\",\n        size: 12,\n    },\n    interaction: {\n      multiselect: true\n    }\n};\n\nfunction randomColor() {\n  const red = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const green = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const blue = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  return `#${red}${green}${blue}`;\n}\n\nfunction generateGraph () {\n  let data = {\n    nodes: [\n      { id: 1, label: \"Node 1\", title: \"node 1 tootip text\" },\n      { id: 2, label: \"Node 2\", title: \"node 2 tootip text\" },\n      { id: 3, label: \"Node 3\", title: \"node 3 tootip text\" },\n      { id: 4, label: \"Node 4\", title: \"node 4 tootip text\" },\n      { id: 5, label: \"Node 5\", title: \"node 5 tootip text\" }\n    ],\n    edges: [\n      { from: 1, to: 2 },\n      { from: 1, to: 3 },\n      { from: 2, to: 4 },\n      { from: 2, to: 5 }\n    ]\n  };\n  return data;\n}\n\n\nconst App = () => {\n\n\n\n  // load the JSON file containing the Gephi network.\n  // try {\n  //   var gephiJSON = loadJSON(\"./datasources/graph_data.json\"); // code in importing_from_gephi.\n\n  // // you can customize the result like with these options. These are explained below.\n  // // These are the default options.\n  // var parserOptions = {\n  //   edges: {\n  //     inheritColor: false\n  //   },\n  //   nodes: {\n  //     fixed: true,\n  //     parseColor: false\n  //   }\n  // }\n\n  // // parse the gephi file to receive an object\n  // // containing nodes and edges in vis format.\n  // var parsed = vis.parseGephiNetwork(gephiJSON, parserOptions);\n\n  // // provide data in the normal fashion\n  // var data = {\n  //   nodes: parsed.nodes,\n  //   edges: parsed.edges\n  // };\n\n  // } catch {\n    let data = {\n      nodes: [\n        { id: 1, label: \"Node 1\", title: \"node 1 tootip text\" },\n        { id: 2, label: \"Node 2\", title: \"node 2 tootip text\" },\n        { id: 3, label: \"Node 3\", title: \"node 3 tootip text\" },\n        { id: 4, label: \"Node 4\", title: \"node 4 tootip text\" },\n        { id: 5, label: \"Node 5\", title: \"node 5 tootip text\" }\n      ],\n      edges: [\n        { from: 1, to: 2 },\n        { from: 1, to: 3 },\n        { from: 2, to: 3 },\n        { from: 2, to: 5 }\n      ]\n    };\n  // }\n  \n\n  const createNode = () => {\n    // const color = randomColor();\n    setState(({ graph: { nodes, edges }, counter, ...rest }) => {\n      const id = counter + 1;\n      // alert('Nodes: ' + nodes.length)\n      const from_pos = Math.floor(Math.random() * (nodes.length - 1));\n      \n      const from = nodes[from_pos].id;\n      // graph.fit();\n      return {\n        graph: {\n          nodes: [\n            ...nodes,\n            { id, label: `Node ${id}`}\n          ],\n          edges: [\n            ...edges,\n            { from, to: id }\n          ]\n        },\n        counter: id,\n        ...rest\n      }\n    });\n  }\n\n  \n  const [deleteButton, setDeleteButton] = useState(false)\n  const [status, setStatus] = useState('INIT')\n  const [state, setState] = useState({\n    counter: 5,\n    graph: {\n      nodes: [\n        { id: 1, label: \"Node 1\", title: \"node 1 tootip text\" },\n        { id: 2, label: \"Node 2\", title: \"node 2 tootip text\" },\n        { id: 3, label: \"Node 3\", title: \"node 3 tootip text\" },\n        { id: 4, label: \"Node 4\", title: \"node 4 tootip text\" },\n        { id: 5, label: \"Node 5\", title: \"node 5 tootip text\" }\n      ],\n      edges: [\n        { from: 1, to: 2 },\n        { from: 1, to: 3 },\n        { from: 2, to: 4 },\n        { from: 2, to: 5 }\n      ]\n    },\n    events: {\n      select: ({ nodes, edges }) => {\n        console.log(\"Selected nodes:\");\n        console.log(nodes);\n        console.log(\"Selected edges:\");\n        console.log(edges);\n        // alert(\"Selected node: \" + nodes);\n        if(nodes.size === 0 && edges.size === 0)\n        setDeleteButton(false);\n        else\n        setDeleteButton(true);\n      },\n      // deselectNode: ({nodes, edges, ...rest}) => {\n      //   if(nodes.size === 0 && edges.size === 0)\n      //   setDeleteButton(false);\n      // },\n      // deselectEdge: ({nodes, edges, ...rest}) => {\n      //   if(nodes.size === 0 && edges.size === 0)\n      //   setDeleteButton(false);\n      // },\n      // click: ({nodes, edges, ...rest}) => {\n      //   if(nodes.size === 0 && edges.size === 0)\n      //   setDeleteButton(false);\n      // },\n      // stabilized: () => {\n      //   if (graph) { // Network will be set using getNetwork event from the Graph component\n      //       graph.setOptions({ physics: false }); // Disable physics after stabilization\n      //       graph.fit();\n      //   }\n      // }\n\n      \n      \n      // doubleClick: ({ nodes, edges }) => {\n      //   console.log(\"Deleted nodes:\");\n      //   console.log(nodes);\n      //   console.log(\"Deleted edges:\");\n      //   console.log(edges);\n        \n      //   // alert(\"Selected node: \" + nodes);\n      // },\n      // doubleClick: ({ pointer: { canvas } }) => {\n      //   createNode(canvas.x, canvas.y);\n      // }\n    }\n  })\n  const { graph, events } = state;\n  const [network, setNetwork] = useState(null);\n\n  const handleNodeDelete = () => {\n    network.deleteSelected();\n    \n    // alert('Nodes: ' + graph.nodes.remove)\n    setDeleteButton(false);\n    \n  };\n  const handleGenerateGraph = () => {\n    let graph_ = generateGraph();\n    setState(({graph, counter, ...rest})=>{return {graph: graph_, counter: graph_.nodes.length, ...rest}})\n    // createNode()\n    setStatus('GEN')\n  }\n\n  const [algo, setAlgo] = useState(null)\n  const handleAlgoChange = (event) => {\n    setAlgo(event.target.value);\n    setStatus('RUN')\n  };\n  const algos = [{label:\"Depth First Search\",value:\"DFS\"},{label:\"Breadth First Search\",value:\"BFS\"}]\n  return (\n    <div height = '100%'>\n      <Header/>\n      <SubHeader status={status} onGenerate={handleGenerateGraph}/>\n      <menubar name='header' >\n        <button onClick={()=>{createNode();}}>\n          Click to add random nodes\n        </button>\n        <button onClick={()=>{}}>\n          Save Graph\n        </button>\n        {deleteButton && <button onClick={handleNodeDelete}>\n          Delete\n        </button>}\n        <p>Work area:</p>\n      </menubar>\n      <GraphBox graph={graph} options={options} events={events} style={{ height: '800px' }} getNetwork={network => {\n        setNetwork(network);\n      }}/>\n      {/* <Graph graph={graph} options={options} events={events} style={{ height: '800px' }} getNetwork={network => {\n        setNetwork(network);\n      }}/> */}\n      <AlgorithmSelector value={algo} onChange={handleAlgoChange} algos={algos}/>\n    </div>\n  );\n\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById(\"root\")\n);\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}