{"ast":null,"code":"var _jsxFileName = \"/home/vedant/visualgo/visualgo-app/src/index.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import ReactDOM from 'react-dom/client';\nimport './index.css';\n// import App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport logo from './logo.svg';\nimport './App.css';\nimport Graph from \"react-graph-vis\";\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = {\n  height: \"100%\",\n  width: \"100%\",\n  nodes: {\n    shape: \"dot\",\n    size: 16\n  },\n  layout: {\n    hierarchical: false\n  },\n  physics: {\n    // forceAtlas2Based: {\n    //     gravitationalConstant: -26,\n    //     centralGravity: 0.005,\n    //     springLength: 230,\n    //     springConstant: 0.18,\n    // },\n    maxVelocity: 146,\n    solver: \"forceAtlas2Based\",\n    // solver: \"repulsion\",\n    timestep: 0.35,\n    stabilization: {\n      enabled: true,\n      iterations: 2000,\n      updateInterval: 25\n    }\n  },\n  edges: {\n    color: \"#abb4be\"\n  }\n  // interaction: {\n  //   zoomView: false\n  // }\n};\n\nfunction randomColor() {\n  const red = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const green = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const blue = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  return `#${red}${green}${blue}`;\n}\nconst App = () => {\n  _s();\n  // load the JSON file containing the Gephi network.\n  try {\n    var gephiJSON = loadJSON(\"./datasources/graph_data.json\"); // code in importing_from_gephi.\n\n    // you can customize the result like with these options. These are explained below.\n    // These are the default options.\n    var parserOptions = {\n      edges: {\n        inheritColor: false\n      },\n      nodes: {\n        fixed: true,\n        parseColor: false\n      }\n    };\n\n    // parse the gephi file to receive an object\n    // containing nodes and edges in vis format.\n    var parsed = vis.parseGephiNetwork(gephiJSON, parserOptions);\n\n    // provide data in the normal fashion\n    var data = {\n      nodes: parsed.nodes,\n      edges: parsed.edges\n    };\n  } catch {\n    const graph = {\n      nodes: [{\n        id: 1,\n        label: \"Node 1\",\n        title: \"node 1 tootip text\"\n      }, {\n        id: 2,\n        label: \"Node 2\",\n        title: \"node 2 tootip text\"\n      }, {\n        id: 3,\n        label: \"Node 3\",\n        title: \"node 3 tootip text\"\n      }, {\n        id: 4,\n        label: \"Node 4\",\n        title: \"node 4 tootip text\"\n      }, {\n        id: 5,\n        label: \"Node 5\",\n        title: \"node 5 tootip text\"\n      }],\n      edges: [{\n        from: 1,\n        to: 2\n      }, {\n        from: 1,\n        to: 3\n      }, {\n        from: 2,\n        to: 4\n      }, {\n        from: 2,\n        to: 5\n      }]\n    };\n  }\n  const createNode = () => {\n    const color = randomColor();\n    setState(_ref => {\n      let {\n        graph: {\n          nodes,\n          edges\n        },\n        counter,\n        ...rest\n      } = _ref;\n      const id = counter + 1;\n      const from = Math.floor(Math.random() * (counter - 1)) + 1;\n      graph.fit();\n      return {\n        graph: {\n          nodes: [...nodes, {\n            id,\n            label: `Node ${id}`,\n            color\n          }],\n          edges: [...edges, {\n            from,\n            to: id\n          }]\n        },\n        counter: id,\n        ...rest\n      };\n    });\n  };\n  const [state, setState] = useState({\n    counter: data.nodes.size(),\n    graph: data,\n    events: {\n      select: _ref2 => {\n        let {\n          nodes,\n          edges\n        } = _ref2;\n        console.log(\"Selected nodes:\");\n        console.log(nodes);\n        console.log(\"Selected edges:\");\n        console.log(edges);\n        // alert(\"Selected node: \" + nodes);\n      },\n\n      stabilized: () => {\n        if (graph) {\n          // Network will be set using getNetwork event from the Graph component\n          graph.setOptions({\n            physics: false\n          }); // Disable physics after stabilization\n          graph.fit();\n        }\n      }\n\n      // doubleClick: ({ nodes, edges }) => {\n      //   console.log(\"Deleted nodes:\");\n      //   console.log(nodes);\n      //   console.log(\"Deleted edges:\");\n      //   console.log(edges);\n\n      //   // alert(\"Selected node: \" + nodes);\n      // },\n      // doubleClick: ({ pointer: { canvas } }) => {\n      //   createNode(canvas.x, canvas.y);\n      // }\n    }\n  });\n\n  const {\n    graph,\n    events\n  } = state;\n  // const {network, setNetwork} = useState(null);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    height: \"100%\",\n    children: [/*#__PURE__*/_jsxDEV(\"menubar\", {\n      name: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          createNode();\n        },\n        children: \"Click to add random nodes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          let str = JSON.stringify(graph);\n        },\n        children: \"Save Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Work area:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Graph, {\n      graph: graph,\n      options: options,\n      events: events,\n      style: {\n        height: '800px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"HiYz5H+BYhGtMUJ6o5rg23cm29Q=\");\n_c = App;\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 181,\n  columnNumber: 3\n}, this), document.getElementById(\"root\"));\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["reportWebVitals","logo","Graph","React","useState","ReactDOM","options","height","width","nodes","shape","size","layout","hierarchical","physics","maxVelocity","solver","timestep","stabilization","enabled","iterations","updateInterval","edges","color","randomColor","red","Math","floor","random","toString","padStart","green","blue","App","gephiJSON","loadJSON","parserOptions","inheritColor","fixed","parseColor","parsed","vis","parseGephiNetwork","data","graph","id","label","title","from","to","createNode","setState","counter","rest","fit","state","events","select","console","log","stabilized","setOptions","str","JSON","stringify","render","document","getElementById"],"sources":["/home/vedant/visualgo/visualgo-app/src/index.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import ReactDOM from 'react-dom/client';\nimport './index.css';\n// import App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Graph from \"react-graph-vis\";\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nconst options = {\n  height: \"100%\",\n    width: \"100%\",\n    nodes: {\n        shape: \"dot\",\n        size: 16\n    },\n    layout: {\n        hierarchical: false\n    },\n    physics: {\n        // forceAtlas2Based: {\n        //     gravitationalConstant: -26,\n        //     centralGravity: 0.005,\n        //     springLength: 230,\n        //     springConstant: 0.18,\n        // },\n        maxVelocity: 146,\n        solver: \"forceAtlas2Based\",\n        // solver: \"repulsion\",\n        timestep: 0.35,\n        stabilization: {\n            enabled: true,\n            iterations: 2000,\n            updateInterval: 25,\n        },\n    },\n    edges: {\n        color: \"#abb4be\"\n    },\n    // interaction: {\n    //   zoomView: false\n    // }\n};\n\nfunction randomColor() {\n  const red = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const green = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const blue = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  return `#${red}${green}${blue}`;\n}\n\n\nconst App = () => {\n\n\n\n  // load the JSON file containing the Gephi network.\n  try {\n    var gephiJSON = loadJSON(\"./datasources/graph_data.json\"); // code in importing_from_gephi.\n\n  // you can customize the result like with these options. These are explained below.\n  // These are the default options.\n  var parserOptions = {\n    edges: {\n      inheritColor: false\n    },\n    nodes: {\n      fixed: true,\n      parseColor: false\n    }\n  }\n\n  // parse the gephi file to receive an object\n  // containing nodes and edges in vis format.\n  var parsed = vis.parseGephiNetwork(gephiJSON, parserOptions);\n\n  // provide data in the normal fashion\n  var data = {\n    nodes: parsed.nodes,\n    edges: parsed.edges\n  };\n\n  } catch {\n    const graph = {\n      nodes: [\n        { id: 1, label: \"Node 1\", title: \"node 1 tootip text\" },\n        { id: 2, label: \"Node 2\", title: \"node 2 tootip text\" },\n        { id: 3, label: \"Node 3\", title: \"node 3 tootip text\" },\n        { id: 4, label: \"Node 4\", title: \"node 4 tootip text\" },\n        { id: 5, label: \"Node 5\", title: \"node 5 tootip text\" }\n      ],\n      edges: [\n        { from: 1, to: 2 },\n        { from: 1, to: 3 },\n        { from: 2, to: 4 },\n        { from: 2, to: 5 }\n      ]\n    };\n  }\n  \n\n  const createNode = () => {\n    const color = randomColor();\n    setState(({ graph: { nodes, edges }, counter, ...rest }) => {\n      const id = counter + 1;\n      const from = Math.floor(Math.random() * (counter - 1)) + 1;\n      graph.fit();\n      return {\n        graph: {\n          nodes: [\n            ...nodes,\n            { id, label: `Node ${id}`, color}\n          ],\n          edges: [\n            ...edges,\n            { from, to: id }\n          ]\n        },\n        counter: id,\n        ...rest\n      }\n    });\n  }\n  const [state, setState] = useState({\n    counter: data.nodes.size(),\n    graph: data,\n    events: {\n      select: ({ nodes, edges }) => {\n        console.log(\"Selected nodes:\");\n        console.log(nodes);\n        console.log(\"Selected edges:\");\n        console.log(edges);\n        // alert(\"Selected node: \" + nodes);\n      },\n      stabilized: () => {\n        if (graph) { // Network will be set using getNetwork event from the Graph component\n            graph.setOptions({ physics: false }); // Disable physics after stabilization\n            graph.fit();\n        }\n      }\n\n      \n      \n      // doubleClick: ({ nodes, edges }) => {\n      //   console.log(\"Deleted nodes:\");\n      //   console.log(nodes);\n      //   console.log(\"Deleted edges:\");\n      //   console.log(edges);\n        \n      //   // alert(\"Selected node: \" + nodes);\n      // },\n      // doubleClick: ({ pointer: { canvas } }) => {\n      //   createNode(canvas.x, canvas.y);\n      // }\n    }\n  })\n  const { graph, events } = state;\n  // const {network, setNetwork} = useState(null);\n  return (\n    <div height = '100%'>\n      <menubar name='header' >\n        <button onClick={()=>{createNode();}}>\n          Click to add random nodes\n        </button>\n        <button onClick={()=>{let str = JSON.stringify(graph);}}>\n          Save Graph\n        </button>\n        <p>Work area:</p>\n      </menubar>\n      <Graph graph={graph} options={options} events={events} style={{ height: '800px' }}/>\n    </div>\n  );\n\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById(\"root\")\n);\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}