{"ast":null,"code":"var createGraph = require('ngraph.graph');\nvar createMiserables = require('miserables').create;\nmodule.exports = factory(createGraph);\n\n// Allow other developers have their own createGraph\nmodule.exports.factory = factory;\nfunction factory(createGraph) {\n  return {\n    ladder: ladder,\n    complete: complete,\n    completeBipartite: completeBipartite,\n    // these are synonyms\n    balancedBinTree: balancedBinTree,\n    balancedBinaryTree: balancedBinTree,\n    binaryTree: balancedBinTree,\n    binTree: balancedBinTree,\n    path: path,\n    circularLadder: circularLadder,\n    grid: grid,\n    grid3: grid3,\n    noLinks: noLinks,\n    wattsStrogatz: wattsStrogatz,\n    cliqueCircle: cliqueCircle,\n    miserables: createMiserables\n  };\n  function ladder(n) {\n    /**\n    * Ladder graph is a graph in form of ladder\n    * @param {Number} n Represents number of steps in the ladder\n    */\n    if (!n || n < 0) {\n      throw new Error('Invalid number of nodes');\n    }\n    var g = createGraph(),\n      i;\n    for (i = 0; i < n - 1; ++i) {\n      g.addLink(i, i + 1);\n      // first row\n      g.addLink(n + i, n + i + 1);\n      // second row\n      g.addLink(i, n + i);\n      // ladder's step\n    }\n\n    g.addLink(n - 1, 2 * n - 1);\n    // last step in the ladder;\n\n    return g;\n  }\n  function circularLadder(n) {\n    /**\n    * Circular ladder with n steps.\n    *\n    * @param {Number} n of steps in the ladder.\n    */\n    if (!n || n < 0) {\n      throw new Error('Invalid number of nodes');\n    }\n    var g = ladder(n);\n    g.addLink(0, n - 1);\n    g.addLink(n, 2 * n - 1);\n    return g;\n  }\n  function complete(n) {\n    /**\n    * Complete graph Kn.\n    *\n    * @param {Number} n represents number of nodes in the complete graph.\n    */\n    if (!n || n < 1) {\n      throw new Error('At least two nodes are expected for complete graph');\n    }\n    var g = createGraph(),\n      i,\n      j;\n    for (i = 0; i < n; ++i) {\n      for (j = i + 1; j < n; ++j) {\n        if (i !== j) {\n          g.addLink(i, j);\n        }\n      }\n    }\n    return g;\n  }\n  function completeBipartite(n, m) {\n    /**\n    * Complete bipartite graph K n,m. Each node in the\n    * first partition is connected to all nodes in the second partition.\n    *\n    * @param {Number} n represents number of nodes in the first graph partition\n    * @param {Number} m represents number of nodes in the second graph partition\n    */\n    if (!n || !m || n < 0 || m < 0) {\n      throw new Error('Graph dimensions are invalid. Number of nodes in each partition should be greater than 0');\n    }\n    var g = createGraph(),\n      i,\n      j;\n    for (i = 0; i < n; ++i) {\n      for (j = n; j < n + m; ++j) {\n        g.addLink(i, j);\n      }\n    }\n    return g;\n  }\n  function path(n) {\n    /**\n    * Path graph with n steps.\n    *\n    * @param {Number} n number of nodes in the path\n    */\n    if (!n || n < 0) {\n      throw new Error('Invalid number of nodes');\n    }\n    var g = createGraph(),\n      i;\n    g.addNode(0);\n    for (i = 1; i < n; ++i) {\n      g.addLink(i - 1, i);\n    }\n    return g;\n  }\n  function grid(n, m) {\n    /**\n    * Grid graph with n rows and m columns.\n    *\n    * @param {Number} n of rows in the graph.\n    * @param {Number} m of columns in the graph.\n    */\n    if (n < 1 || m < 1) {\n      throw new Error('Invalid number of nodes in grid graph');\n    }\n    var g = createGraph(),\n      i,\n      j;\n    if (n === 1 && m === 1) {\n      g.addNode(0);\n      return g;\n    }\n    for (i = 0; i < n; ++i) {\n      for (j = 0; j < m; ++j) {\n        var node = i + j * n;\n        if (i > 0) {\n          g.addLink(node, i - 1 + j * n);\n        }\n        if (j > 0) {\n          g.addLink(node, i + (j - 1) * n);\n        }\n      }\n    }\n    return g;\n  }\n  function grid3(n, m, z) {\n    /**\n    * 3D grid with n rows and m columns and z levels.\n    *\n    * @param {Number} n of rows in the graph.\n    * @param {Number} m of columns in the graph.\n    * @param {Number} z of levels in the graph.\n    */\n    if (n < 1 || m < 1 || z < 1) {\n      throw new Error('Invalid number of nodes in grid3 graph');\n    }\n    var g = createGraph(),\n      i,\n      j,\n      k;\n    if (n === 1 && m === 1 && z === 1) {\n      g.addNode(0);\n      return g;\n    }\n    for (k = 0; k < z; ++k) {\n      for (i = 0; i < n; ++i) {\n        for (j = 0; j < m; ++j) {\n          var level = k * n * m;\n          var node = i + j * n + level;\n          if (i > 0) {\n            g.addLink(node, i - 1 + j * n + level);\n          }\n          if (j > 0) {\n            g.addLink(node, i + (j - 1) * n + level);\n          }\n          if (k > 0) {\n            g.addLink(node, i + j * n + (k - 1) * n * m);\n          }\n        }\n      }\n    }\n    return g;\n  }\n  function balancedBinTree(n) {\n    /**\n    * Balanced binary tree with n levels.\n    *\n    * @param {Number} n of levels in the binary tree\n    */\n    if (n === undefined || n < 0) {\n      throw new Error('Invalid number of levels in balanced tree');\n    }\n    var g = createGraph(),\n      count = Math.pow(2, n),\n      level;\n    if (n === 0) {\n      g.addNode(1);\n    }\n    for (level = 1; level < count; ++level) {\n      var root = level,\n        left = root * 2,\n        right = root * 2 + 1;\n      g.addLink(root, left);\n      g.addLink(root, right);\n    }\n    return g;\n  }\n  function noLinks(n) {\n    /**\n    * Graph with no links\n    *\n    * @param {Number} n of nodes in the graph\n    */\n    if (n < 0) {\n      throw new Error('Number of nodes should be >= 0');\n    }\n    var g = createGraph(),\n      i;\n    for (i = 0; i < n; ++i) {\n      g.addNode(i);\n    }\n    return g;\n  }\n  function cliqueCircle(cliqueCount, cliqueSize) {\n    /**\n    * A circular graph with cliques instead of individual nodes\n    *\n    * @param {Number} cliqueCount number of cliques inside circle\n    * @param {Number} cliqueSize number of nodes inside each clique\n    */\n\n    if (cliqueCount < 1) throw new Error('Invalid number of cliqueCount in cliqueCircle');\n    if (cliqueSize < 1) throw new Error('Invalid number of cliqueSize in cliqueCircle');\n    var graph = createGraph();\n    for (var i = 0; i < cliqueCount; ++i) {\n      appendClique(cliqueSize, i * cliqueSize);\n      if (i > 0) {\n        graph.addLink(i * cliqueSize, i * cliqueSize - 1);\n      }\n    }\n    graph.addLink(0, graph.getNodesCount() - 1);\n    return graph;\n    function appendClique(size, from) {\n      for (var i = 0; i < size; ++i) {\n        graph.addNode(i + from);\n      }\n      for (var i = 0; i < size; ++i) {\n        for (var j = i + 1; j < size; ++j) {\n          graph.addLink(i + from, j + from);\n        }\n      }\n    }\n  }\n  function wattsStrogatz(n, k, p, seed) {\n    /**\n    * Watts-Strogatz small-world graph.\n    *\n    * @param {Number} n The number of nodes\n    * @param {Number} k Each node is connected to k nearest neighbors in ring topology\n    * @param {Number} p The probability of rewiring each edge\n     * @see https://github.com/networkx/networkx/blob/master/networkx/generators/random_graphs.py\n    */\n    if (k >= n) throw new Error('Choose smaller `k`. It cannot be larger than number of nodes `n`');\n    var random = require('ngraph.random').random(seed || 42);\n    var g = createGraph(),\n      i,\n      to;\n    for (i = 0; i < n; ++i) {\n      g.addNode(i);\n    }\n\n    // connect each node to k/2 neighbors\n    var neighborsSize = Math.floor(k / 2 + 1);\n    for (var j = 1; j < neighborsSize; ++j) {\n      for (i = 0; i < n; ++i) {\n        to = (j + i) % n;\n        g.addLink(i, to);\n      }\n    }\n\n    // rewire edges from each node\n    // loop over all nodes in order (label) and neighbors in order (distance)\n    // no self loops or multiple edges allowed\n    for (j = 1; j < neighborsSize; ++j) {\n      for (i = 0; i < n; ++i) {\n        if (random.nextDouble() < p) {\n          var from = i;\n          to = (j + i) % n;\n          var newTo = random.next(n);\n          var needsRewire = newTo === from || g.hasLink(from, newTo);\n          if (needsRewire && g.getLinks(from).length === n - 1) {\n            // we cannot rewire this node, it has too many links.\n            continue;\n          }\n          // Enforce no self-loops or multiple edges\n          while (needsRewire) {\n            newTo = random.next(n);\n            needsRewire = newTo === from || g.hasLink(from, newTo);\n          }\n          var link = g.hasLink(from, to);\n          g.removeLink(link);\n          g.addLink(from, newTo);\n        }\n      }\n    }\n    return g;\n  }\n}","map":{"version":3,"names":["createGraph","require","createMiserables","create","module","exports","factory","ladder","complete","completeBipartite","balancedBinTree","balancedBinaryTree","binaryTree","binTree","path","circularLadder","grid","grid3","noLinks","wattsStrogatz","cliqueCircle","miserables","n","Error","g","i","addLink","j","m","addNode","node","z","k","level","undefined","count","Math","pow","root","left","right","cliqueCount","cliqueSize","graph","appendClique","getNodesCount","size","from","p","seed","random","to","neighborsSize","floor","nextDouble","newTo","next","needsRewire","hasLink","getLinks","length","link","removeLink"],"sources":["/home/vedant/visualgo/visualgo-app/node_modules/ngraph.generators/index.js"],"sourcesContent":["var createGraph = require('ngraph.graph');\n\nvar createMiserables = require('miserables').create;\n\nmodule.exports = factory(createGraph);\n\n// Allow other developers have their own createGraph\nmodule.exports.factory = factory;\n\nfunction factory(createGraph) {\n  return {\n    ladder: ladder,\n    complete: complete,\n    completeBipartite: completeBipartite,\n\n    // these are synonyms\n    balancedBinTree: balancedBinTree,\n    balancedBinaryTree: balancedBinTree,\n    binaryTree: balancedBinTree,\n    binTree: balancedBinTree,\n\n    path: path,\n    circularLadder: circularLadder,\n    grid: grid,\n    grid3: grid3,\n    noLinks: noLinks,\n    wattsStrogatz: wattsStrogatz,\n    cliqueCircle: cliqueCircle,\n    miserables: createMiserables\n  };\n\n\n  function ladder(n) {\n  /**\n  * Ladder graph is a graph in form of ladder\n  * @param {Number} n Represents number of steps in the ladder\n  */\n    if (!n || n < 0) {\n      throw new Error('Invalid number of nodes');\n    }\n\n    var g = createGraph(),\n        i;\n\n    for (i = 0; i < n - 1; ++i) {\n      g.addLink(i, i + 1);\n      // first row\n      g.addLink(n + i, n + i + 1);\n      // second row\n      g.addLink(i, n + i);\n      // ladder's step\n    }\n\n    g.addLink(n - 1, 2 * n - 1);\n    // last step in the ladder;\n\n    return g;\n  }\n\n  function circularLadder(n) {\n  /**\n  * Circular ladder with n steps.\n  *\n  * @param {Number} n of steps in the ladder.\n  */\n      if (!n || n < 0) {\n          throw new Error('Invalid number of nodes');\n      }\n\n      var g = ladder(n);\n\n      g.addLink(0, n - 1);\n      g.addLink(n, 2 * n - 1);\n      return g;\n  }\n\n  function complete(n) {\n  /**\n  * Complete graph Kn.\n  *\n  * @param {Number} n represents number of nodes in the complete graph.\n  */\n    if (!n || n < 1) {\n      throw new Error('At least two nodes are expected for complete graph');\n    }\n\n    var g = createGraph(),\n        i,\n        j;\n\n    for (i = 0; i < n; ++i) {\n      for (j = i + 1; j < n; ++j) {\n        if (i !== j) {\n          g.addLink(i, j);\n        }\n      }\n    }\n\n    return g;\n  }\n\n  function completeBipartite(n, m) {\n  /**\n  * Complete bipartite graph K n,m. Each node in the\n  * first partition is connected to all nodes in the second partition.\n  *\n  * @param {Number} n represents number of nodes in the first graph partition\n  * @param {Number} m represents number of nodes in the second graph partition\n  */\n    if (!n || !m || n < 0 || m < 0) {\n      throw new Error('Graph dimensions are invalid. Number of nodes in each partition should be greater than 0');\n    }\n\n    var g = createGraph(),\n        i, j;\n\n    for (i = 0; i < n; ++i) {\n      for (j = n; j < n + m; ++j) {\n        g.addLink(i, j);\n      }\n    }\n\n    return g;\n  }\n\n  function path(n) {\n  /**\n  * Path graph with n steps.\n  *\n  * @param {Number} n number of nodes in the path\n  */\n    if (!n || n < 0) {\n      throw new Error('Invalid number of nodes');\n    }\n\n    var g = createGraph(),\n        i;\n\n    g.addNode(0);\n\n    for (i = 1; i < n; ++i) {\n      g.addLink(i - 1, i);\n    }\n\n    return g;\n  }\n\n\n  function grid(n, m) {\n  /**\n  * Grid graph with n rows and m columns.\n  *\n  * @param {Number} n of rows in the graph.\n  * @param {Number} m of columns in the graph.\n  */\n    if (n < 1 || m < 1) {\n      throw new Error('Invalid number of nodes in grid graph');\n    }\n    var g = createGraph(),\n        i,\n        j;\n    if (n === 1 && m === 1) {\n      g.addNode(0);\n      return g;\n    }\n\n    for (i = 0; i < n; ++i) {\n      for (j = 0; j < m; ++j) {\n        var node = i + j * n;\n        if (i > 0) { g.addLink(node, i - 1 + j * n); }\n        if (j > 0) { g.addLink(node, i + (j - 1) * n); }\n      }\n    }\n\n    return g;\n  }\n\n  function grid3(n, m, z) {\n  /**\n  * 3D grid with n rows and m columns and z levels.\n  *\n  * @param {Number} n of rows in the graph.\n  * @param {Number} m of columns in the graph.\n  * @param {Number} z of levels in the graph.\n  */\n    if (n < 1 || m < 1 || z < 1) {\n      throw new Error('Invalid number of nodes in grid3 graph');\n    }\n    var g = createGraph(),\n        i, j, k;\n\n    if (n === 1 && m === 1 && z === 1) {\n      g.addNode(0);\n      return g;\n    }\n\n    for (k = 0; k < z; ++k) {\n      for (i = 0; i < n; ++i) {\n        for (j = 0; j < m; ++j) {\n          var level = k * n * m;\n          var node = i + j * n + level;\n          if (i > 0) { g.addLink(node, i - 1 + j * n + level); }\n          if (j > 0) { g.addLink(node, i + (j - 1) * n + level); }\n          if (k > 0) { g.addLink(node, i + j * n + (k - 1) * n * m ); }\n        }\n      }\n    }\n\n    return g;\n  }\n\n  function balancedBinTree(n) {\n  /**\n  * Balanced binary tree with n levels.\n  *\n  * @param {Number} n of levels in the binary tree\n  */\n    if (n === undefined || n < 0) {\n      throw new Error('Invalid number of levels in balanced tree');\n    }\n    var g = createGraph(),\n        count = Math.pow(2, n),\n        level;\n\n    if (n === 0) {\n      g.addNode(1);\n    }\n\n    for (level = 1; level < count; ++level) {\n      var root = level,\n        left = root * 2,\n        right = root * 2 + 1;\n\n      g.addLink(root, left);\n      g.addLink(root, right);\n    }\n\n    return g;\n  }\n\n  function noLinks(n) {\n  /**\n  * Graph with no links\n  *\n  * @param {Number} n of nodes in the graph\n  */\n    if (n < 0) {\n      throw new Error('Number of nodes should be >= 0');\n    }\n\n    var g = createGraph(), i;\n    for (i = 0; i < n; ++i) {\n      g.addNode(i);\n    }\n\n    return g;\n  }\n\n  function cliqueCircle(cliqueCount, cliqueSize) {\n  /**\n  * A circular graph with cliques instead of individual nodes\n  *\n  * @param {Number} cliqueCount number of cliques inside circle\n  * @param {Number} cliqueSize number of nodes inside each clique\n  */\n\n    if (cliqueCount < 1) throw new Error('Invalid number of cliqueCount in cliqueCircle');\n    if (cliqueSize < 1) throw new Error('Invalid number of cliqueSize in cliqueCircle');\n\n    var graph = createGraph();\n\n    for (var i = 0; i < cliqueCount; ++i) {\n      appendClique(cliqueSize, i * cliqueSize)\n\n      if (i > 0) {\n        graph.addLink(i * cliqueSize, i * cliqueSize - 1);\n      }\n    }\n    graph.addLink(0, graph.getNodesCount() - 1);\n\n    return graph;\n\n    function appendClique(size, from) {\n      for (var i = 0; i < size; ++i) {\n        graph.addNode(i + from)\n      }\n\n      for (var i = 0; i < size; ++i) {\n        for (var j = i + 1; j < size; ++j) {\n          graph.addLink(i + from, j + from)\n        }\n      }\n    }\n  }\n\n  function wattsStrogatz(n, k, p, seed) {\n  /**\n  * Watts-Strogatz small-world graph.\n  *\n  * @param {Number} n The number of nodes\n  * @param {Number} k Each node is connected to k nearest neighbors in ring topology\n  * @param {Number} p The probability of rewiring each edge\n\n  * @see https://github.com/networkx/networkx/blob/master/networkx/generators/random_graphs.py\n  */\n    if (k >= n) throw new Error('Choose smaller `k`. It cannot be larger than number of nodes `n`');\n\n\n    var random = require('ngraph.random').random(seed || 42);\n\n    var g = createGraph(), i, to;\n    for (i = 0; i < n; ++i) {\n      g.addNode(i);\n    }\n\n    // connect each node to k/2 neighbors\n    var neighborsSize = Math.floor(k/2 + 1);\n    for (var j = 1; j < neighborsSize; ++j) {\n      for (i = 0; i < n; ++i) {\n        to = (j + i) % n;\n        g.addLink(i, to);\n      }\n    }\n\n    // rewire edges from each node\n    // loop over all nodes in order (label) and neighbors in order (distance)\n    // no self loops or multiple edges allowed\n    for (j = 1; j < neighborsSize; ++j) {\n      for (i = 0; i < n; ++i) {\n        if (random.nextDouble() < p) {\n          var from = i;\n          to = (j + i) % n;\n\n          var newTo = random.next(n);\n          var needsRewire = (newTo === from || g.hasLink(from, newTo));\n          if (needsRewire && g.getLinks(from).length === n - 1) {\n            // we cannot rewire this node, it has too many links.\n            continue;\n          }\n          // Enforce no self-loops or multiple edges\n          while (needsRewire) {\n            newTo = random.next(n);\n            needsRewire = (newTo === from || g.hasLink(from, newTo));\n          }\n          var link = g.hasLink(from, to);\n          g.removeLink(link);\n          g.addLink(from, newTo);\n        }\n      }\n    }\n\n    return g;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}