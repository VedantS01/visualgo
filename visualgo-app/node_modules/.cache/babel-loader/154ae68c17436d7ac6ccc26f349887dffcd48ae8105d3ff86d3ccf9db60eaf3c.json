{"ast":null,"code":"var _jsxFileName = \"/home/vedant/visualgo/visualgo-app/src/App.js\",\n  _s = $RefreshSig$();\nimport Graph from \"react-graph-vis\";\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const randomGraph = () => {\n    try {\n      for (let i = 0; i < 10; i++) createNode();\n    } catch {\n      alert('Oops!');\n    }\n  };\n\n  // const createNode = (x, y) => {\n  //   const color = randomColor();\n  //   setState(({ graph: { nodes, edges }, counter, ...rest }) => {\n  //     const id = counter + 1;\n  //     const from = Math.floor(Math.random() * (counter - 1)) + 1;\n  //     return {\n  //       graph: {\n  //         nodes: [\n  //           ...nodes,\n  //           { id, label: `Node ${id}`, color, x, y }\n  //         ],\n  //         edges: [\n  //           ...edges,\n  //           { from, to: id }\n  //         ]\n  //       },\n  //       counter: id,\n  //       ...rest\n  //     }\n  //   });\n  // }\n\n  const createNode = () => {\n    const color = randomColor();\n    setState(_ref => {\n      let {\n        graph: {\n          nodes,\n          edges\n        },\n        counter,\n        ...rest\n      } = _ref;\n      const id = counter + 1;\n      const from = Math.floor(Math.random() * (counter - 1)) + 1;\n      return {\n        graph: {\n          nodes: [...nodes, {\n            id,\n            label: `Node ${id}`,\n            color\n          }],\n          edges: [...edges, {\n            from,\n            to: id\n          }]\n        },\n        counter: id,\n        ...rest\n      };\n    });\n  };\n  const [state, setState] = useState({\n    counter: 5,\n    graph: {\n      nodes: [{\n        id: 1,\n        label: \"Node 1\",\n        color: \"#e04141\"\n      }, {\n        id: 2,\n        label: \"Node 2\",\n        color: \"#e09c41\"\n      }, {\n        id: 3,\n        label: \"Node 3\",\n        color: \"#e0df41\"\n      }, {\n        id: 4,\n        label: \"Node 4\",\n        color: \"#7be041\"\n      }, {\n        id: 5,\n        label: \"Node 5\",\n        color: \"#41e0c9\"\n      }],\n      edges: [{\n        from: 1,\n        to: 2\n      }, {\n        from: 1,\n        to: 3\n      }, {\n        from: 2,\n        to: 4\n      }, {\n        from: 2,\n        to: 5\n      }]\n    },\n    events: {\n      select: _ref2 => {\n        let {\n          nodes,\n          edges\n        } = _ref2;\n        console.log(\"Selected nodes:\");\n        console.log(nodes);\n        console.log(\"Selected edges:\");\n        console.log(edges);\n        // alert(\"Selected node: \" + nodes);\n      }\n      // doubleClick: ({ nodes, edges }) => {\n      //   console.log(\"Deleted nodes:\");\n      //   console.log(nodes);\n      //   console.log(\"Deleted edges:\");\n      //   console.log(edges);\n\n      //   // alert(\"Selected node: \" + nodes);\n      // },\n      // doubleClick: ({ pointer: { canvas } }) => {\n      //   createNode(canvas.x, canvas.y);\n      // }\n    }\n  });\n\n  const {\n    graph,\n    events\n  } = state;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"menubar\", {\n      name: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          createNode();\n        },\n        children: \"Click to add random nodes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Work area:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Graph, {\n      graph: graph,\n      options: options,\n      events: events,\n      style: {\n        height: \"640px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"2NRCJEbfxZzNnY0Q6dqnPNsrpTc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Graph","React","useState","ReactDOM","App","randomGraph","i","createNode","alert","color","randomColor","setState","graph","nodes","edges","counter","rest","id","from","Math","floor","random","label","to","state","events","select","console","log","options","height"],"sources":["/home/vedant/visualgo/visualgo-app/src/App.js"],"sourcesContent":["import Graph from \"react-graph-vis\";\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\n\n\n\nconst App = () => {\n  const randomGraph = () => {\n    try{\n      for (let i = 0; i < 10; i++) createNode();\n    } catch  {\n      alert('Oops!')\n    }\n    \n\n  }\n  \n  // const createNode = (x, y) => {\n  //   const color = randomColor();\n  //   setState(({ graph: { nodes, edges }, counter, ...rest }) => {\n  //     const id = counter + 1;\n  //     const from = Math.floor(Math.random() * (counter - 1)) + 1;\n  //     return {\n  //       graph: {\n  //         nodes: [\n  //           ...nodes,\n  //           { id, label: `Node ${id}`, color, x, y }\n  //         ],\n  //         edges: [\n  //           ...edges,\n  //           { from, to: id }\n  //         ]\n  //       },\n  //       counter: id,\n  //       ...rest\n  //     }\n  //   });\n  // }\n\n  const createNode = () => {\n    const color = randomColor();\n    setState(({ graph: { nodes, edges }, counter, ...rest }) => {\n      const id = counter + 1;\n      const from = Math.floor(Math.random() * (counter - 1)) + 1;\n      return {\n        graph: {\n          nodes: [\n            ...nodes,\n            { id, label: `Node ${id}`, color}\n          ],\n          edges: [\n            ...edges,\n            { from, to: id }\n          ]\n        },\n        counter: id,\n        ...rest\n      }\n    });\n  }\n  const [state, setState] = useState({\n    counter: 5,\n    graph: {\n      nodes: [\n        { id: 1, label: \"Node 1\", color: \"#e04141\" },\n        { id: 2, label: \"Node 2\", color: \"#e09c41\" },\n        { id: 3, label: \"Node 3\", color: \"#e0df41\" },\n        { id: 4, label: \"Node 4\", color: \"#7be041\" },\n        { id: 5, label: \"Node 5\", color: \"#41e0c9\" }\n      ],\n      edges: [\n        { from: 1, to: 2 },\n        { from: 1, to: 3 },\n        { from: 2, to: 4 },\n        { from: 2, to: 5 }\n      ]\n    },\n    events: {\n      select: ({ nodes, edges }) => {\n        console.log(\"Selected nodes:\");\n        console.log(nodes);\n        console.log(\"Selected edges:\");\n        console.log(edges);\n        // alert(\"Selected node: \" + nodes);\n      }\n      // doubleClick: ({ nodes, edges }) => {\n      //   console.log(\"Deleted nodes:\");\n      //   console.log(nodes);\n      //   console.log(\"Deleted edges:\");\n      //   console.log(edges);\n        \n      //   // alert(\"Selected node: \" + nodes);\n      // },\n      // doubleClick: ({ pointer: { canvas } }) => {\n      //   createNode(canvas.x, canvas.y);\n      // }\n    }\n  })\n  const { graph, events } = state;\n  return (\n    <div>\n      <menubar name='header' >\n        <button onClick={()=>{createNode();}}>\n          Click to add random nodes\n        </button>\n        <p>Work area:</p>\n      </menubar>\n      <Graph graph={graph} options={options} events={events} style={{ height: \"640px\" }} />\n    </div>\n  );\n\n}\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}